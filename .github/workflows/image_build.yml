name: Container Image Build

on:
  workflow_call:
    inputs:
      image_name:
        description: "Name of image, without tags. Not required if image_tags specified."
        required: false
        type: string
      image_tags:
        description: "Default=the images are automatically tagged. Override tags with space separated list."
        required: false
        type: string
        default: ""
      build_args:
        description: "Space separated list of build args to use for the image."
        required: false
        type: string
      registry:
        description: "Override GHCR to use an external reg."
        required: false
        type: string
        default: "ghcr.io"
      context:
        description: "Root directory to start the build from."
        required: false
        type: string
        default: "."
      dockerfile:
        description: "Absolute path of the dockerfile (inside the context dir)."
        required: false
        type: string
        default: "Dockerfile"
      build_target:
        description: "The target to built to (default to end of the Dockerfile)."
        required: false
        type: string
        default: ""
      push:
        description: "Override prevent pushing the image."
        required: false
        type: boolean
        default: true
      cache:
        description: "Use GHCR caching. Default true. Set this false if registry is not ghcr.io."
        required: false
        type: boolean
        default: true
      multi_arch:
        description: "Build a multi-arch image for AMD/ARM."
        required: false
        type: boolean
        default: true
    outputs:
      image_name:
        description: "The final image tag."
        value: ${{ jobs.build-image.outputs.image_name }}

jobs:
  build-image:
    runs-on: ubuntu-latest

    outputs:
      image_name: ${{ steps.get_image_name.outputs.image_name }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dockerfile Vulnerabilities
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ inputs.context }}
          dockerfile_path: ${{ inputs.context }}/${{ inputs.dockerfile }}
          quiet: true # show only failed checks
          skip_check: CKV_DOCKER_8,CKV_DOCKER_2 # Skip check for USER root

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Image Tags
        if: inputs.image_tags == ''
        id: set-tags
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Set up QEMU
        if: inputs.multi_arch == 'true'
        uses: docker/setup-qemu-action@v2

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Container Image
        id: container-build
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.context }}/${{ inputs.dockerfile }}
          target: ${{ inputs.build_target }}
          push: ${{ inputs.push }}
          tags: ${{ inputs.image_tags || steps.set-tags.outputs.tags }}
          build-args: ${{ inputs.build_args }}
          cache-from: ${{ inputs.cache == 'true' && 'type=gha' || '' }}
          cache-to: ${{ inputs.cache == 'true' && 'type=gha,mode=max' || '' }}
          # Build for AMD and ARM (requires buildx+qemu)
          platforms: ${{ inputs.multi_arch == 'true' && 'linux/amd64,linux/arm64' || 'linux/amd64' }}

      - id: get_image_name
        name: Get First Image Name
        run: |
          image_names=${{ fromJSON(steps.container-build.outputs.metadata)['image.name'] }}
          IFS=',' read -ra images_array <<< "$image_names"
          echo "image_name=${images_array[0]}" >> $GITHUB_OUTPUT

  scan-image:
    needs: build-image
    runs-on: ubuntu-latest

    steps:
      - name: Scan Container Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-image.outputs.image_name }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL"
