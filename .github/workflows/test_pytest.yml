name: PyTest

on:
  workflow_call:
    inputs:
      image_name:
        description: "The image root name, without tag. E.g. 'ghcr.io/[dollar]{{ github.repository }}'"
        required: true
        type: string
      build_context:
        description: "Root directory to start the build from."
        required: false
        type: string
        default: "."
      build_dockerfile:
        description: "Name of dockerfile, relative to context dir."
        required: false
        type: string
        default: "Dockerfile"
      build_target:
        description: "The target to built to (default to ci stage)."
        required: false
        type: string
        default: "ci"
      extra_build_args:
        description: "Space separated list of build args to use for the image."
        required: false
        type: string
      tag_override:
        description: "An override for the build image tag. Must include tests and have PyTest installed"
        required: false
        type: string
      cache_image:
        description: "Cache the built image, for the next run. Default true."
        required: false
        type: boolean
        default: true
      environment:
        description: "The environment to use for testing."
        required: false
        type: string
        default: "test"

jobs:
  check-img-cache:
    runs-on: ubuntu-latest
    if: ${{ inputs.cache_image }}
    environment:
      name: ${{ inputs.environment }}
    outputs:
      cache-hit: ${{ steps.image-cache.outputs.cache-hit }}
    steps:
      - id: image-cache
        uses: actions/cache@v3
        with:
          path: /tmp/images
          key: image-cache-${{ runner.os }}

  test-img-build:
    uses: hotosm/gh-workflows/.github/workflows/image_build.yml@1.3.2
    needs: [check-img-cache]
    if: ${{ needs.check-img-cache.outputs.cache-hit != 'true' }}
    with:
      context: ${{ inputs.build_context }}
      dockerfile: ${{ inputs.build_dockerfile }}
      build_target: ${{ inputs.build_target }}
      image_name: ${{ inputs.image_name }}
      # Default to auto-tag, unless override specified
      image_tags: ${{ inputs.tag_override && format('{0}:{1}', inputs.image_name, inputs.tag_override) || '' }}
      extra_build_args: ${{ inputs.extra_build_args }}
      # Build temp image for PR, no multi-arch, scan, or ghcr cache required
      multi_arch: false
      scan_image: false
      cache: false

  run-pytest:
    runs-on: ubuntu-latest
    needs: [test-img-build]
    # Ensure it runs, even if test-img-build does not run
    if: always()
    environment:
      name: ${{ inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: image-cache
        if: ${{ inputs.cache_image }}
        uses: actions/cache@v3
        with:
          path: /tmp/images
          key: image-cache-${{ runner.os }}

      - name: Save Local Image
        if: ${{ inputs.cache_image && steps.image-cache.outputs.cache-hit != 'true' }}
        run: |
          # Make artifact dir
          mkdir -p /tmp/images

          # Cache main image build
          image_fullname=${{ needs.test-img-build.outputs.image_name }}
          image_tag=${{ needs.test-img-build.outputs.image_tag }}

          img_underscores=${image_fullname//[:\/.]/_}
          docker pull "${image_fullname}"
          echo "Packaging image ${image_fullname} to /tmp/images/${img_underscores}.tar"
          docker image save "${image_fullname}" --output "/tmp/images/${img_underscores}.tar"

          # Set IMAGE env var
          echo "Setting IMAGE=${image_fullname} in github env"
          echo "IMAGE=${image_fullname}" >> $GITHUB_ENV

      - name: Load Cached Imgs
        if: ${{ inputs.cache_image && steps.image-cache.outputs.cache-hit == 'true' }}
        run: |
          for image_tar in /tmp/images/*; do
              docker image load --input "${image_tar}" || true
          done

          echo "Getting image tag via docker"
          image_fullname=$(\
            docker image ls \
            --filter=reference='${{ inputs.image_name }}' \
            --format='{{.Repository}}:{{.Tag}}'\
          )
          echo "Extracted name: ${image_fullname}"

          # Set IMAGE env var
          echo "IMAGE=${image_fullname}" >> $GITHUB_ENV

      - name: Vars and Secrets to Env
        env:
          GIT_BRANCH: ${{ github.ref_name }}
          VARS_CONTEXT: ${{ toJson(vars) }}
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        run: |
          # Random delimeter string for security
          delim=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)

          # Parse JSON with multiline strings, using delimeter (Github specific)
          to_envs() { jq -r "to_entries[] | \"\(.key)<<$delim\n\(.value)\n$delim\n\""; }

          # Set all vars
          echo "GIT_BRANCH=${GIT_BRANCH}" >> $GITHUB_ENV

          # Set VARS_CONTEXT if not null
          if [ "${VARS_CONTEXT}" != "null" ]; then
            echo "${VARS_CONTEXT}" | to_envs >> $GITHUB_ENV
          fi

          # Set SECRETS_CONTEXT if not null
          if [ "${SECRETS_CONTEXT}" != "null" ]; then
            echo "${SECRETS_CONTEXT}" | to_envs >> $GITHUB_ENV
          fi

      - name: Create .env file
        run: |
          # Get a8m/envsubst (required for default vals syntax ${VAR:-default})
          echo "Downloading envsubst"
          curl -L https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-`uname -s`-`uname -m` -o envsubst
          chmod +x envsubst

          # Check if .env.example exists
          if [ -f .env.example ]; then
            echo "Substituting variables from .env.example --> .env"
            ./envsubst < .env.example > .env
          else
            echo ".env.example not found, creating .env with GIT_BRANCH only"
            echo "GIT_BRANCH=${GIT_BRANCH}" > .env
          fi

          echo "GIT_BRANCH=${GIT_BRANCH}" >> .env

      - name: Run PyTest
        run: |
          docker run \
            -v ${PWD}/tests:/data/tests \
            --env-file=.env \
            ${{ env.IMAGE }} pytest
