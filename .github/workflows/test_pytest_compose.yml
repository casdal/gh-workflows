name: PyTest

on:
  workflow_call:
    inputs:
      image_name:
        description: "The image root name, without tag. E.g. 'ghcr.io/[dollar]{{ github.repository }}'"
        required: true
        type: string
      build_context:
        description: "Root directory to start the build from."
        required: false
        type: string
        default: "."
      build_dockerfile:
        description: "Name of dockerfile, relative to context dir."
        required: false
        type: string
        default: "Dockerfile"
      build_target:
        description: "The target to built to (default to ci stage)."
        required: false
        type: string
        default: "ci"
      build_args:
        description: "Space separated list of build args to use for the image."
        required: false
        type: string
      tag_override:
        description: "An override for the build image tag. Must include tests and have PyTest installed"
        required: false
        type: string
      cache_image:
        description: "Cache the built image, for the next run. Default true."
        required: false
        type: boolean
        default: true
      cache_extra_imgs:
        description: "Space separated list of images to cache on each run (e.g. to avoid rate limiting)."
        required: false
        type: string
      docker_compose_file:
        description: "The docker compose file used to run the test."
        required: false
        type: string
        default: docker-compose.yml
      docker_compose_service:
        description: "The docker compose service to run the test against."
        required: true
        type: string
      environment:
        description: "The environment to use for testing."
        required: false
        type: string
        default: "test"

jobs:
  check-img-cache:
    runs-on: ubuntu-latest
    if: ${{ inputs.cache_extra_imgs || inputs.cache_image }}
    environment:
      name: ${{ inputs.environment }}
    outputs:
      cache-hit: ${{ steps.image-cache.outputs.cache-hit }}
    steps:
      - id: image-cache
        uses: actions/cache@v3
        with:
          path: /tmp/images
          key: image-cache-${{ runner.os }}

  test-img-build:
    uses: hotosm/gh-workflows/.github/workflows/image_build.yml@main
    needs: [check-img-cache]
    if: ${{ needs.check-img-cache.outputs.cache-hit != 'true' }}
    with:
      context: ${{ inputs.build_context }}
      build_target: ${{ inputs.build_target }}
      image_name: ${{ inputs.image_name }}
      # Default to auto-tag, unless override specified
      image_tags: ${{ inputs.tag_override && format('{0}:{1}', inputs.image_name, inputs.tag_override) || '' }}
      build_args: ${{ inputs.build_args }}
      # Build temp image for PR, no multi-arch, scan, or ghcr cache required
      multi_arch: false
      scan: false
      cache: false

  run-pytest:
    runs-on: ubuntu-latest
    needs: [test-img-build]
    # Ensure it runs, even if test-img-build does not run
    if: always()
    environment:
      name: ${{ inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: image-cache
        if: ${{ inputs.cache_extra_imgs || inputs.cache_image }}
        uses: actions/cache@v3
        with:
          path: /tmp/images
          key: image-cache-${{ runner.os }}

      - name: Save Local Images
        if: ${{ (inputs.cache_extra_imgs || inputs.cache_image) && steps.image-cache.outputs.cache-hit != 'true' }}
        run: |
          # Function to pull and package Docker image
          function pull_and_package_image() {
            local image=$1
            echo "Processing image ${image}"
            docker pull "${image}"

            if [ $? -eq 0 ]; then
              img_underscores=${image//[:\/.]/_}
              echo "Packaging image to /tmp/images/${img_underscores}.tar"
              docker image save "${image}" --output "/tmp/images/${img_underscores}.tar"
            else
              echo "Failed to pull the image: ${image}"
            fi
          }

          # Make artifact dir
          mkdir -p /tmp/images

          # Cache main image build
          CACHE_ENABLED=${{ inputs.cache_image }}
          if [[ "${CACHE_ENABLED}" == true ]]; then
              image_name=${{ needs.test-img-build.outputs.image_name }}
              image_tag=${{ needs.test-img-build.outputs.image_tag }}

              img_underscores=${image_name//[:\/.]/_}
              echo "Packaging image to /tmp/images/${img_underscores}.tar"
              docker image save "${image_name}" --output "/tmp/images/${img_underscores}.tar"

              echo "TAG_OVERRIDE=${image_tag}" >> $GITHUB_ENV
          fi

          # Cache extra images
          extra_images_array=(${{ inputs.cache_extra_imgs }})
          if [[ -n "${extra_images_array[@]}" ]]; then
              echo "Images to cache: ${extra_images_array[@]}"

              # Iterate through dependency images
              for image in "${extra_images_array[@]}"; do
                  pull_and_package_image "$image"
              done
          fi

      - name: Load Cached Imgs
        if: ${{ (inputs.cache_extra_imgs || inputs.cache_image) && steps.image-cache.outputs.cache-hit == 'true' }}
        run: |
          # Load images
          for image_tar in /tmp/images/*; do
              docker image load --input $image_tar || true
          done

          # Set TAG_OVERRIDE if image was cached
          CACHE_ENABLED=${{ inputs.cache_image }}
          if [[ "${CACHE_ENABLED}" == true ]]; then
              echo "Getting image tag via docker"
              image=$(\
                docker image ls \
                --filter=reference='${{ inputs.image_name }}' \
                --format='{{.Tag}}'\
              )
              image_tag="${image##*:}"
              echo "Image Tag: $image_tag"
              echo "TAG_OVERRIDE=${image_tag}" >> $GITHUB_ENV
          fi

      - name: Vars and Secrets to Env
        env:
          TAG_OVERRIDE: ${{ env.TAG_OVERRIDE || 'ci-development' }}
          GIT_BRANCH: ${{ github.ref_name }}
          VARS_CONTEXT: ${{ toJson(vars) }}
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        run: |
          to_envs() { jq -r "to_entries[] | \"\(.key)=\(.value)\""; }

          echo "TAG_OVERRIDE=${TAG_OVERRIDE}" >> $GITHUB_ENV
          echo "GIT_BRANCH=${GIT_BRANCH}" >> $GITHUB_ENV
          echo "${VARS_CONTEXT}" | to_envs >> $GITHUB_ENV
          echo "${SECRETS_CONTEXT}" | to_envs >> $GITHUB_ENV

      - name: Create .env file
        run: env > .env

      - name: Run PyTest
        run: |
          docker compose --file ${{ inputs.docker_compose_file }} \
            run ${{ inputs.docker_compose_service }} \
            wait-for-it fmtm-db:5432 --strict \
            -- wait-for-it central:8383 --strict --timeout=30 \
            -- pytest
